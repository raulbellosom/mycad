generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String
  description String?
  roles       RolePermission[]
}

model RolePermission {
  id           Int         @id @default(autoincrement())
  roleId       Int
  permissionId Int
  role         Role        @relation(fields: [roleId], references: [id])
  permission   Permission  @relation(fields: [permissionId], references: [id])

  @@unique([roleId, permissionId])
}

model Role {
  id         Int             @id @default(autoincrement())
  name       String
  users      User[]
  permissions RolePermission[]
}

model User {
  id        String      @id @default(uuid())
  firstName String
  lastName  String
  email     String      @unique
  phone     String?
  password  String
  status    Boolean?
  roleId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  enabled   Boolean     @default(true)
  photo     UserImage[] @relation("UserImages")
  role      Role        @relation(fields: [roleId], references: [id])
  vehicles  Vehicle[]
}

model Vehicle {
  id                      String             @id @default(uuid())
  acquisitionDate         DateTime
  cost                    Float?
  costCurrency            String?
  bookValue               Float?             
  bookValueCurrency       String?
  currentMarketValue      Float?
  marketValueCurrency     String? 
  mileage                 Int
  status                  Boolean
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt
  createdById             String
  comments                String?
  enabled                 Boolean             @default(true)
  modelId                 Int
  economicNumber          String?
  plateNumber             String?
  serialNumber            String?
  files                   File[]
  images                  Image[]            @relation("VehicleImages")
  rentals                 Rental[]
  serviceHistories        ServiceHistory[]
  repairReport            RepairReport[]
  createdBy               User               @relation(fields: [createdById], references: [id])
  model                   Model              @relation(fields: [modelId], references: [id])
  conditions              VehicleCondition[]

  @@index([createdById], map: "Vehicle_createdById_fkey")
  @@index([modelId], map: "Vehicle_modelId_fkey")
}

model VehicleType {
  id      Int     @id @default(autoincrement())
  enabled Boolean @default(true)
  name    String
  economicGroup String
  models  Model[]
}

model VehicleBrand {
  id      Int     @id @default(autoincrement())
  name    String
  enabled Boolean @default(true)
  models  Model[]
}

model Model {
  id       Int          @id @default(autoincrement())
  name     String
  year     Int
  typeId   Int
  brandId  Int
  enabled  Boolean      @default(true)
  brand    VehicleBrand @relation(fields: [brandId], references: [id])
  type     VehicleType  @relation(fields: [typeId], references: [id])
  vehicles Vehicle[]

  @@index([brandId], map: "Model_brandId_fkey")
  @@index([typeId], map: "Model_typeId_fkey")
}

model ServiceHistory {
  id                    String   @id @default(uuid())
  vehicleId             String
  folio                 String   @unique
  vehicle               Vehicle  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  reportType            ServiceType
  serviceDate           DateTime
  endServiceDate        DateTime?
  serviceProviderName   String
  serviceContactInfo    String
  description           String
  totalCost             Float
  comments              String? 
  attachments           ServicesFile[]  
  replacedParts         ReplacedPart[] 
  enabled               Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@index([vehicleId], map: "ServiceHistory_vehicleId_fkey") 
}

model ReplacedPart {
  id          String          @id @default(uuid())
  reportId    String
  report      ServiceHistory  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  partName    String
  actionType  ActionType
  cost        Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

enum ActionType {
  REPAIRED
  REPLACED
}

enum ServiceType {
  PREVENTIVE
  CORRECTIVE
}

model ServicesFile{
  id          String   @id @default(uuid())
  serviceId   String
  service     ServiceHistory @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  url         String
  type        String
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rental {
  id        String   @id @default(uuid())
  vehicleId String
  clientId  String
  startDate DateTime
  endDate   DateTime
  dailyRate Float
  totalCost Float
  status    String
  comments  String?
  createdAt DateTime @default(now())
  enabled   Boolean   @default(true)
  updatedAt DateTime @updatedAt
  client    Client   @relation(fields: [clientId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([clientId], map: "Rental_clientId_fkey")
  @@index([vehicleId], map: "Rental_vehicleId_fkey")
}

model Client {
  id          String   @id @default(uuid())
  name        String
  company     String
  email       String
  phoneNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enabled     Boolean   @default(true)
  rentals     Rental[]
}

model File {
  id         String   @id @default(uuid())
  vehicleId  String
  metadata   Json?
  uploadedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  enabled    Boolean  @default(true)
  type       String
  url        String
  vehicle    Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId], map: "File_vehicleId_fkey")
}

model Condition {
  id       Int                @id @default(autoincrement())
  name     String
  enabled  Boolean            @default(true)
  vehicles VehicleCondition[]
}

model VehicleCondition {
  id          Int       @id @default(autoincrement())
  vehicleId   String
  conditionId Int
  condition   Condition @relation(fields: [conditionId], references: [id])
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])

  @@unique([vehicleId, conditionId])
  @@index([conditionId], map: "VehicleCondition_conditionId_fkey")
}

model Image {
  id        String   @id @default(uuid())
  url       String
  thumbnail String?
  type      String
  metadata  Json?
  createdAt DateTime @default(now())
  enabled   Boolean  @default(true)
  vehicleId String?
  vehicle   Vehicle? @relation("VehicleImages", fields: [vehicleId], references: [id])

  @@index([vehicleId])
}

model UserImage {
  id        String   @id @default(uuid())
  url       String
  thumbnail String?
  type      String
  metadata  Json?
  enabled   Boolean   @default(true)
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation("UserImages", fields: [userId], references: [id])

  @@index([userId])
}

model RepairReport {
  id                String        @id @default(uuid())  // ID único del reporte
  vehicleId         String                              // Relación con el vehículo reparado
  folio             String        @unique               // Folio único del reporte
  vehicle           Vehicle       @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  failureDate       DateTime?                           // Fecha de la falla
  startRepairDate   DateTime?                           // Fecha de inicio de la reparación
  repairDate        DateTime                            // Fecha de la reparación
  description       String                              // Descripción del problema reparado
  totalCost         Float                               // Costo total de la reparación
  comments          String?                             // Comentarios adicionales
  attachments       RepairFile[]                        // Archivos adjuntos (facturas, fotos)
  repairedParts     RepairedPart[]                      // Partes reparadas o reemplazadas
  workshopType      WorkshopType                        // Tipo de taller: propio o externo
  workshopName      String?                             // Nombre del taller (solo para talleres externos)
  workshopContact   String?                             // Contacto del taller (solo para talleres externos)
  enabled           Boolean        @default(true)       // Para habilitar/deshabilitar el reporte
  createdAt         DateTime       @default(now())      // Fecha de creación
  updatedAt         DateTime       @updatedAt           // Fecha de última modificación

  @@index([vehicleId], map: "RepairReport_vehicleId_fkey")
}


model RepairedPart {
  id          String         @id @default(uuid())       // ID único de la parte reparada/reemplazada
  reportId    String                                 // Relación con el reporte de reparación
  report      RepairReport   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  partName    String                                  // Nombre de la parte reparada
  actionType  RepairAction                           // Tipo de acción (reparado o reemplazado)
  cost        Float                                   // Costo asociado a la parte
  warranty    String?                                 // Garantía asociada a la parte (opcional)
  createdAt   DateTime       @default(now())          // Fecha de creación
  updatedAt   DateTime       @updatedAt               // Fecha de última modificación
}

model RepairFile {
  id          String         @id @default(uuid())      // ID único del archivo
  repairId    String                                  // Relación con el reporte de reparación
  repair      RepairReport    @relation(fields: [repairId], references: [id], onDelete: Cascade)
  url         String                                  // URL del archivo
  type        String                                  // Tipo de archivo (imagen, factura, etc.)
  metadata    Json?                                   // Metadatos adicionales
  createdAt   DateTime       @default(now())          // Fecha de creación
  updatedAt   DateTime       @updatedAt               // Fecha de última modificación
}

enum RepairAction {
  REPAIRED
  REPLACED
}

enum WorkshopType {
  IN_HOUSE    // Reparación realizada en un taller propio
  EXTERNAL    // Reparación realizada en un taller externo
}
